<h2 class="text-center my-4">Upload CSV File</h2>

<div class="container">
    <div class="input-group mb-3 w-50 mx-auto">
        <input type="file" id="fileInput" name="file" class="form-control" required />
        <button onclick="uploadCsv()" class="btn btn-primary">Upload</button>
    </div>

    <div id="main" style="display: none">
        <h3 class="text-center">CSV Data</h3>
        <div class="d-flex justify-content-between align-items-center mb-3">
            <div class="d-flex align-items-center gap-2">
                <label for="startDate" class="fw-bold">Start Date:</label>
                <input type="date" id="startDate" name="startDate" class="form-control w-auto" value="2017-01-10">

                <label for="endDate" class="fw-bold">End Date:</label>
                <input type="date" id="endDate" name="endDate" class="form-control w-auto" value="2017-03-23">

                <button id="filterButton" class="btn btn-primary">
                    <i class="bi bi-filter"></i> Filter
                </button>
            </div>

            <button id="toggleView" class="btn btn-secondary">
                <i class="bi bi-toggle-off"></i> Switch to Chart
            </button>
        </div>

        <div class="d-flex flex-wrap justify-content-between">
            <div class="flex-grow-1 me-4" style="min-width: 400px;">
                <div id="tableChartWrapper" class="w-100 border rounded bg-light p-3" style="min-height: 400px; display: flex; align-items: center; justify-content: center;">
                    <!-- Table Section -->
                    <div id="tableContainer" class="table-responsive w-100 h-100" style="max-height: 400px; overflow-y: auto;">
                        <h3 class="text-center">Market Price EX1 Table</h3>
                        <table id="dataTable" class="table table-striped table-bordered">
                            <thead class="table-dark">
                                <tr>
                                    <th onclick="sortTable(0, 'date', this)">Date <span>↑↓</span></th>
                                    <th onclick="sortTable(1, 'numeric', this)">Market Price <span>↑↓</span></th>
                                </tr>
                            </thead>
                            <tbody id="table-content">
                            </tbody>
                        </table>
                    </div>

                    <!-- Chart Section (Initially Hidden) -->
                    <div id="chartContainer" class="w-100 h-100 text-center" style="display: none;">
                        <h3 class="text-center">Market Price EX1 Chart</h3>
                        <canvas id="lineChart"></canvas>
                    </div>
                </div>
            </div>

            <!-- Right Side (Statistics) -->
            <div class="p-4 border rounded bg-light shadow-sm"
                 style="min-width: 300px; max-width: 350px; background: #f8f9fa;">
                <h3 class="text-center fw-bold mb-3">Market Price Statistics</h3>

                <ul class="list-unstyled mb-0">
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">Min Price:</span>
                        <span id="minPrice" class="text-primary">-</span>
                    </li>
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">Max Price:</span>
                        <span id="maxPrice" class="text-danger">-</span>
                    </li>
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">Avg Price:</span>
                        <span id="avgPrice" class="text-success">-</span>
                    </li>
                    <hr>
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">Most Expensive Hour:</span>
                    </li>
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">From: </span>
                        <span id="firstHour" class="text-secondary">-</span>
                    </li>
                    <li class="d-flex justify-content-between">
                        <span class="fw-bold">To: </span>
                        <span id="secondHour" class="text-secondary">-</span>
                    </li>
                </ul>
            </div>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let dataList = [];

    function renderDataTable() {
        let startDate = document.getElementById("startDate").value;
        let endDate = document.getElementById("endDate").value;

        let startDateObj = startDate ? parseDate(startDate) : null;
        let endDateObj = endDate ? parseDate(endDate) : null;
        let filterList = dataList.filter(item => {
            let itemDateObj = parseDate(item.date); 
            let adjustedEndDate = endDateObj ? new Date(endDateObj) : null;

            if (adjustedEndDate) {
                adjustedEndDate.setDate(adjustedEndDate.getDate() + 1);

            }
            return (!startDateObj || itemDateObj >= startDateObj) && (!adjustedEndDate || itemDateObj < adjustedEndDate);
        });

        let table = document.getElementById("table-content");
        let rowsHtml = filterList.map(item => `<tr><td>${item.date}</td><td>${item.marketPrice}</td></tr>`).join("");

        table.innerHTML = rowsHtml;

        calculateStatistics(filterList);
        renderLineChart(filterList)
    }

    document.getElementById("filterButton").addEventListener("click", function () {
        renderDataTable();
    });

    function uploadCsv() {
        let form = new FormData();
        let fileInput = document.getElementById("fileInput").files[0];

        if (!fileInput) {
            alert("Please choose a CSV file before uploading.");
            return;
        }

        form.append("file", fileInput);

        $.ajax({
            url: "/Data/UploadCsv1",
            type: "POST",
            data: form,
            contentType: false,
            processData: false,
            success: function (response) {
                $("#errorMessage").addClass("d-none");
                $("#csvTableContainer").html(response);
                dataList = response;
                if (dataList.length > 0) {
                    renderDataTable();
                    document.getElementById("main").style.display = "block";
                }
            },
            error: function (xhr, status, error) {
                $("#errorMessage").removeClass("d-none").text("Error: " + xhr.responseText);
            }
        });
    }

    function parseDate(dateStr) {
        if (!dateStr) return null;

        let parts;
        if (dateStr.includes("/")) {
            parts = dateStr.split(" ");
            let dateParts = parts[0].split("/"); 

            let hours = 0, minutes = 0;

            if (parts.length > 1 && parts[1].includes(":")) {
                let timeParts = parts[1].split(":"); 
                hours = parseInt(timeParts[0], 10);
                minutes = parseInt(timeParts[1], 10);
            }

            return new Date(
                parseInt(dateParts[2], 10),   
                parseInt(dateParts[1], 10) - 1, 
                parseInt(dateParts[0], 10),   
                hours,                        
                minutes                       
            );
        } else if (dateStr.includes("-")) {
            parts = dateStr.split("-");
            return new Date(parseInt(parts[0], 10), parseInt(parts[1], 10) - 1, parseInt(parts[2], 10));
        }
        return null;
    }


    function sortTable(columnIndex, type, header) {
        let table = document.getElementById("dataTable");
        let tbody = table.querySelector("tbody");
        let rows = Array.from(tbody.rows);
        let ascending = header.dataset.sortOrder !== "asc";

        rows.sort((rowA, rowB) => {
            let cellA = rowA.cells[columnIndex].innerText.trim();
            let cellB = rowB.cells[columnIndex].innerText.trim();

            if (type === 'numeric') {
                return ascending ? (parseFloat(cellA) - parseFloat(cellB)) : (parseFloat(cellB) - parseFloat(cellA));
            } else if (type === 'date') {
                let dateA = parseDate(cellA);
                let dateB = parseDate(cellB);
                return ascending ? dateA - dateB : dateB - dateA;
            } else {
                return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
            }
        });

        tbody.innerHTML = "";
        rows.forEach(row => tbody.appendChild(row));

        header.dataset.sortOrder = ascending ? "asc" : "desc";

        document.querySelectorAll("thead th span").forEach(span => span.innerHTML = "↑↓");
        header.querySelector("span").innerHTML = ascending ? "↑" : "↓";
    }

    function calculateStatistics(filterList) {
        if (filterList.length === 0) return;

        let prices = filterList.map(item => parseFloat(item.marketPrice)).filter(val => !isNaN(val));

        if (prices.length === 0) return;

        let minValue = Math.min(...prices);
        let maxValue = Math.max(...prices);
        let avgValue = prices.reduce((sum, val) => sum + val, 0) / prices.length;

        document.getElementById("minPrice").innerText = minValue.toFixed(2);
        document.getElementById("maxPrice").innerText = maxValue.toFixed(2);
        document.getElementById("avgPrice").innerText = avgValue.toFixed(2);

        let maxSum = 0;
        let firstDate = "", secondDate = "";

        for (let i = 0; i < prices.length - 1; i++) {
            let sum = prices[i] + prices[i + 1];
            if (sum > maxSum) {
                maxSum = sum;
                firstDate = dataList[i].date;
                secondDate = dataList[i + 1].date;
            }
        }
        document.getElementById("firstHour").innerText = firstDate;
        document.getElementById("secondHour").innerText = secondDate;
    }

    document.getElementById("toggleView").addEventListener("click", function () {
        let tableContainer = document.getElementById("tableContainer");
        let chartContainer = document.getElementById("chartContainer");
        let button = document.getElementById("toggleView");

        if (tableContainer.style.display === "none") {
            tableContainer.style.display = "block";
            chartContainer.style.display = "none";
            button.innerText = "Switch to Chart";
        } else {
            tableContainer.style.display = "none";
            chartContainer.style.display = "block";
            button.innerText = "Switch to Table";
        }
    });

    function renderLineChart(filterList) {      
        if (!filterList || filterList.length === 0) {
            console.log("No data to display in chart");
            return;
        }

        filterList.sort((a, b) => parseDate(a.date) - parseDate(b.date));

        let labels = filterList.map(item => item.date);
        let prices = filterList.map(item => parseFloat(item.marketPrice));

        let chartCanvas = document.getElementById("lineChart");

        chartCanvas.style.height = "250px";
        chartCanvas.style.width = "100%";

        if (chartCanvas.chartInstance) {
            chartCanvas.chartInstance.destroy();
        }

        let ctx = chartCanvas.getContext("2d");

        chartCanvas.chartInstance = new Chart(ctx, {
            type: "line",
            data: {
                labels: labels,
                datasets: [{
                    label: "Market Price",
                    data: prices,
                    borderColor: "blue",
                    backgroundColor: "rgba(0, 0, 255, 0.1)",
                    borderWidth: 2,
                    pointRadius: 1,
                    pointBackgroundColor: "blue",
                    tension: 0.4
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: true, 
                scales: {
                    x: {
                        title: { display: true, text: "Date" },
                        ticks: { autoSkip: true, maxTicksLimit: 24 }, 
                    },
                    y: {
                        title: { display: true, text: "Market Price" },
                        beginAtZero: false
                    }
                },
                plugins: {
                    legend: { display: true },
                    tooltip: { enabled: true }
                }
            }
        });
    }


</script>
