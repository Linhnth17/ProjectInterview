<h2 class="text-center my-4">Upload CSV File</h2>

<div class="container">
    <div class="input-group mb-3 w-50 mx-auto">
        <input type="file" id="fileInput" name="file" class="form-control" required />
        <button onclick="uploadCsv()" class="btn btn-primary">Upload</button>
    </div>

    <div id="main" style="display: none">
        <h3 class="text-center">CSV Data</h3>
        <div class="input-group mb-3 w-50 mx-auto">
            <select id="filterType" class="form-select">
                <option value="marketPrice">Market Price</option>
                <option value="date">Date</option>
            </select>
            <input type="text" id="filterInput" class="form-control" placeholder="Enter filter value...">
            <button id="filterButton" class="btn btn-secondary">Filter</button>
        </div>
        <div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
            <table id="dataTable" class="table table-striped table-bordered">
                <thead class="table-dark">
                    <tr>
                        <th onclick="sortTable(0, 'date', this)">Date <span>↑↓</span></th>
                        <th onclick="sortTable(1, 'numeric', this)">Market Price <span>↑↓</span></th>
                    </tr>
                </thead>
                <tbody id="table-content">
                </tbody>
            </table>
        </div>

        <h3 class="text-center mt-4">Market Price Statistics</h3>
        <div class="text-center">
            <p>Minimum Market Price: <span id="minPrice">-</span></p>
            <p>Maximum Market Price: <span id="maxPrice">-</span></p>
            <p>Average Market Price: <span id="avgPrice">-</span></p>
            <p>Most Expensive Hour Window: <span id="maxHourWindow">-</span></p>
            <p>First Hour: <span id="firstHour">-</span></p>
            <p>Second Hour: <span id="secondHour">-</span></p>
        </div>

        <h3 class="text-center mt-4">Market Price Charts</h3>
        <div class="row">
            <div class="col-md-6 d-flex flex-column align-items-center">
                <canvas id="combinedChart"></canvas>
                <p class="chart-title"><strong>Market Price Statistics</strong></p>
            </div>
            <div class="col-md-6 d-flex flex-column align-items-center">
                <canvas id="expensiveHourChart"></canvas>
                <p class="chart-title"><strong>Most Expensive Hour Window</strong></p>
            </div>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    let dataList = [];

    function renderDataTable() {
        let filterType = document.getElementById("filterType").value;
        let filterValue = document.getElementById("filterInput").value.trim().toLowerCase();

        let filterList = dataList;
        if (filterValue !== "") {
            filterList = dataList.filter(item => {
                let value = item[filterType] ?? "";
                if (filterType === "marketPrice") {
                    let filterNumber = parseFloat(filterValue);
                    if (isNaN(filterNumber)) return false;

                    let valueStr = value.toString();
                    let filterStr = filterNumber.toString();

                    return valueStr.startsWith(filterStr);
                }
                return value.toString().toLowerCase().includes(filterValue);
            });
        }
        let table = document.getElementById("table-content");
        let rowsHtml = filterList.map(item => `<tr><td>${item.date}</td><td>${item.marketPrice}</td></tr>`).join("");

        table.innerHTML = rowsHtml;
    }

    document.getElementById("filterButton").addEventListener("click", function () {
        renderDataTable();
    });

    function uploadCsv() {
        let form = new FormData();
        let fileInput = document.getElementById("fileInput").files[0];
        form.append("file", fileInput);

        $.ajax({
            url: "/Data/UploadCsv1",
            type: "POST",
            data: form,
            contentType: false,
            processData: false,
            success: function (response) {
                console.log(response);
                $("#errorMessage").addClass("d-none");
                $("#csvTableContainer").html(response);
                dataList = response;
                if (dataList.length > 0) {
                    renderDataTable();
                    calculateStatistics();
                    document.getElementById("main").style.display = "block";
                }
                // Cập nhật bảng CSV
            },
            error: function (xhr, status, error) {
                $("#errorMessage").removeClass("d-none").text("Error: " + xhr.responseText);
            }
        });
    }

    function parseDate(dateStr) {
        let parts = dateStr.split(/[\/-]/);
        if (parts.length === 3) {
            let day = parseInt(parts[0], 10);
            let month = parseInt(parts[1], 10) - 1;
            let year = parseInt(parts[2], 10);
            return new Date(year, month, day);
        }
        return new Date(dateStr);
    }

    function sortTable(columnIndex, type, header) {
        let table = document.getElementById("dataTable");
        let tbody = table.querySelector("tbody");
        let rows = Array.from(tbody.rows);
        let ascending = header.dataset.sortOrder !== "asc";

        rows.sort((rowA, rowB) => {
            let cellA = rowA.cells[columnIndex].innerText.trim();
            let cellB = rowB.cells[columnIndex].innerText.trim();

            if (type === 'numeric') {
                return ascending ? (parseFloat(cellA) - parseFloat(cellB)) : (parseFloat(cellB) - parseFloat(cellA));
            } else if (type === 'date') {
                let dateA = parseDate(cellA);
                let dateB = parseDate(cellB);
                return ascending ? dateA - dateB : dateB - dateA;
            } else {
                return ascending ? cellA.localeCompare(cellB) : cellB.localeCompare(cellA);
            }
        });

        tbody.innerHTML = "";
        rows.forEach(row => tbody.appendChild(row));

        header.dataset.sortOrder = ascending ? "asc" : "desc";

        document.querySelectorAll("thead th span").forEach(span => span.innerHTML = "↑↓");
        header.querySelector("span").innerHTML = ascending ? "↑" : "↓";
    }

    function calculateStatistics() {
        if (dataList.length === 0) return;

        // Extract only market prices
        let prices = dataList.map(item => parseFloat(item.marketPrice)).filter(val => !isNaN(val));

        if (prices.length === 0) return;

        let minValue = Math.min(...prices);
        let maxValue = Math.max(...prices);
        let avgValue = prices.reduce((sum, val) => sum + val, 0) / prices.length;

        document.getElementById("minPrice").innerText = minValue.toFixed(2);
        document.getElementById("maxPrice").innerText = maxValue.toFixed(2);
        document.getElementById("avgPrice").innerText = avgValue.toFixed(2);

        // Find the most expensive hour window (sum of two consecutive prices)
        let maxSum = 0;
        let firstDate = "", secondDate = "";

        for (let i = 0; i < prices.length - 1; i++) {
            let sum = prices[i] + prices[i + 1];
            if (sum > maxSum) {
                maxSum = sum;
                firstDate = dataList[i].date;
                secondDate = dataList[i + 1].date;
            }
        }

        document.getElementById("maxHourWindow").innerText = maxSum.toFixed(2);
        document.getElementById("firstHour").innerText = firstDate;
        document.getElementById("secondHour").innerText = secondDate;

        renderCharts(minValue, maxValue, avgValue, maxSum, firstDate, secondDate);
    }

    let combinedChartInstance = null;
    let expensiveHourChartInstance = null;
    function renderCharts(minValue, maxValue, avgValue, maxSum, firstDate, secondDate) {
        let ctx1 = document.getElementById("combinedChart").getContext("2d");
        let ctx2 = document.getElementById("expensiveHourChart").getContext("2d");

        let firstMarketPrice = parseFloat(dataList.find(item => item.date === firstDate)?.marketPrice || 0);
        let secondMarketPrice = parseFloat(dataList.find(item => item.date === secondDate)?.marketPrice || 0);


        // Destroy existing charts if they exist
        if (combinedChartInstance) {
            combinedChartInstance.destroy();
        }
        if (expensiveHourChartInstance) {
            expensiveHourChartInstance.destroy();
        }

        // Create new charts
        combinedChartInstance = new Chart(ctx1, {
            type: "bar",
            data: {
                labels: ["Min Price", "Max Price", "Avg Price"],
                datasets: [{
                    label: "Market Prices",
                    data: [minValue, maxValue, avgValue],
                    backgroundColor: [
                        "rgba(255, 99, 132, 0.6)",
                        "rgba(54, 162, 235, 0.6)",
                        "rgba(75, 192, 192, 0.6)"
                    ],
                    borderColor: [
                        "rgba(255, 99, 132, 1)",
                        "rgba(54, 162, 235, 1)",
                        "rgba(75, 192, 192, 1)"
                    ],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: { beginAtZero: true }
                }
            }
        });

        expensiveHourChartInstance = new Chart(ctx2, {
            type: "bar",
            data: {
                labels: ["First Hour (" + firstDate + ")", "Second Hour (" + secondDate + ")"],
                datasets: [{
                    label: "Market Price",
                    data: [firstMarketPrice, secondMarketPrice],
                    backgroundColor: ["rgba(255, 159, 64, 0.6)", "rgba(153, 102, 255, 0.6)"],
                    borderColor: ["rgba(255, 159, 64, 1)", "rgba(153, 102, 255, 1)"],
                    borderWidth: 1
                }]
            },
            options: {
                responsive: true,
                scales: {
                    y: {
                        beginAtZero: true,
                    }
                },
                plugins: {
                    title: {
                        display: true,
                        text: "Most Expensive Hour Window (Total: " + maxSum.toFixed(2) + ")"
                    }
                }
            }
        });
    }
</script>
